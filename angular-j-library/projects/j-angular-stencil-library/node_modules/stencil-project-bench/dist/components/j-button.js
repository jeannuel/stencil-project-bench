import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire();
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var classnames = createCommonjsModule(function (module) {
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
					classes.push(arg.toString());
					continue;
				}

				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

const jButtonCss = ".j-button{cursor:pointer;background-color:#e9e9ee;border:1px solid #dbdbdb;padding:0.5rem 1rem;border-radius:0.5rem}.j-button.contained{background-color:#dfdfdf;border:1px solid #dbdbdb}.j-button.outlined{background-color:transparent;border:1px solid #c3c3c3}.j-button:hover{background-color:#e4e4e4;border:1px solid #dbdbdb}.j-button:active{background-color:#cacaca;border:1px solid #dbdbdb}";

const JButton$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.jClick = createEvent(this, "jClick", 7);
    this.handleClick = () => {
      this.jClick.emit(true);
    };
    this.disabled = false;
    this.variant = 'contained';
    this.type = undefined;
    this.isDraggable = false;
  }
  setClassNames() {
    const { variant } = this;
    return classnames('j-button', variant);
  }
  render() {
    const { type, disabled, isDraggable } = this;
    return (h("button", { type: type, disabled: disabled, onClick: this.handleClick, class: this.setClassNames(), draggable: isDraggable }, h("slot", null)));
  }
  static get style() { return jButtonCss; }
}, [1, "j-button", {
    "disabled": [4],
    "variant": [1],
    "type": [1],
    "isDraggable": [4, "is-draggable"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["j-button"];
  components.forEach(tagName => { switch (tagName) {
    case "j-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, JButton$1);
      }
      break;
  } });
}

const JButton = JButton$1;
const defineCustomElement = defineCustomElement$1;

export { JButton, defineCustomElement };
